<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StreamFlix - Movies & Series</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: #141414;
            color: white;
            overflow-x: hidden;
        }

        /* Header */
        .header {
            position: fixed;
            top: 0;
            width: 100%;
            background: linear-gradient(180deg, rgba(0,0,0,0.8) 0%, transparent 100%);
            z-index: 1000;
            padding: 20px 60px;
            transition: background-color 0.3s ease;
        }

        .header.scrolled {
            background-color: #141414;
        }

        .nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 32px;
            font-weight: bold;
            color: #e50914;
            text-decoration: none;
        }

        .nav-links {
            display: flex;
            list-style: none;
            gap: 30px;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .nav-links a:hover {
            color: #e50914;
        }

        /* Hero Section */
        .hero {
            height: 100vh;
            background: linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 600"><rect fill="%23222" width="1200" height="600"/><text x="600" y="300" text-anchor="middle" fill="%23444" font-size="24" font-family="Arial">Featured Movie Background</text></svg>');
            background-size: cover;
            background-position: center;
            display: flex;
            align-items: center;
            padding: 0 60px;
        }

        .hero-content {
            max-width: 600px;
            z-index: 2;
        }

        .hero h1 {
            font-size: 3.5rem;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }

        .hero p {
            font-size: 1.2rem;
            line-height: 1.6;
            margin-bottom: 30px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }

        .hero-buttons {
            display: flex;
            gap: 15px;
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background-color: white;
            color: black;
        }

        .btn-primary:hover {
            background-color: rgba(255,255,255,0.8);
        }

        .btn-secondary {
            background-color: rgba(109,109,110,0.7);
            color: white;
        }

        .btn-secondary:hover {
            background-color: rgba(109,109,110,0.9);
        }

        /* Content Sections */
        .content {
            padding: 0 60px;
        }

        .section {
            margin-bottom: 50px;
        }

        .section h2 {
            font-size: 1.8rem;
            margin-bottom: 20px;
            color: white;
        }

        .row {
            display: flex;
            gap: 10px;
            overflow-x: auto;
            padding: 10px 0;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

        .row::-webkit-scrollbar {
            display: none;
        }

        .card {
            min-width: 300px;
            height: 169px;
            background: #333;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
            transition: transform 0.3s ease;
            position: relative;
            background-size: cover;
            background-position: center;
        }

        .card:hover {
            transform: scale(1.05);
        }

        .card-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0,0,0,0.8));
            padding: 20px;
            color: white;
        }

        .card-title {
            font-size: 1.1rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .card-meta {
            font-size: 0.9rem;
            color: #ccc;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
        }

        .modal-content {
            background-color: #181818;
            margin: 5% auto;
            padding: 0;
            border-radius: 8px;
            width: 80%;
            max-width: 800px;
            position: relative;
        }

        .modal-header {
            height: 400px;
            background-size: cover;
            background-position: center;
            display: flex;
            align-items: flex-end;
            padding: 40px;
        }

        .modal-info {
            background: linear-gradient(transparent, rgba(0,0,0,0.8));
            padding: 40px;
        }

        .close {
            position: absolute;
            top: 20px;
            right: 30px;
            color: white;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            z-index: 1;
        }

        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }

        .spinner {
            border: 3px solid #333;
            border-top: 3px solid #e50914;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error {
            text-align: center;
            color: #e50914;
            padding: 40px;
        }

        @media (max-width: 768px) {
            .header {
                padding: 15px 30px;
            }

            .hero {
                padding: 0 30px;
            }

            .hero h1 {
                font-size: 2.5rem;
            }

            .content {
                padding: 0 30px;
            }

            .nav-links {
                display: none;
            }

            .card {
                min-width: 250px;
            }
        }
    </style>
</head>
<body>
    <header class="header" id="header">
        <nav class="nav">
            <a href="#" class="logo">StreamFlix</a>
            <ul class="nav-links">
                <li><a href="#home">Home</a></li>
                <li><a href="#movies">Movies</a></li>
                <li><a href="#series">TV Shows</a></li>
                <li><a href="#my-list">My List</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section class="hero" id="hero">
            <div class="hero-content">
                <h1 id="hero-title">Loading...</h1>
                <p id="hero-description">Please wait while we load the featured content...</p>
                <div class="hero-buttons">
                    <a href="#" class="btn btn-primary" id="play-btn">▶ Play</a>
                    <a href="#" class="btn btn-secondary" id="info-btn">ℹ More Info</a>
                </div>
            </div>
        </section>

        <div class="content">
            <div class="section">
                <h2>All Movies</h2>
                <div class="row" id="all-movies-row">
                    <div class="loading">
                        <div class="spinner"></div>
                    </div>
                </div>
            </div>

            <div class="section">
                <h2>Action Movies</h2>
                <div class="row" id="action-row">
                    <div class="loading">
                        <div class="spinner"></div>
                    </div>
                </div>
            </div>

            <div class="section">
                <h2>Sci-Fi Movies</h2>
                <div class="row" id="scifi-row">
                    <div class="loading">
                        <div class="spinner"></div>
                    </div>
                </div>
            </div>

            <div class="section">
                <h2>Top Rated</h2>
                <div class="row" id="top-rated-row">
                    <div class="loading">
                        <div class="spinner"></div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Modal -->
    <div class="modal" id="modal">
        <div class="modal-content">
            <span class="close" id="close-modal">&times;</span>
            <div class="modal-header" id="modal-header">
                <div class="modal-info">
                    <h2 id="modal-title">Title</h2>
                    <p id="modal-description">Description</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // API Service
        class APIService {
            constructor() {
                this.baseURL = ''; // Replace with your actual backend URL
            }

            // Fetch movies from backend
            async fetchMovies() {
                try {
                    // Simulate network delay for demo
                    await new Promise(resolve => setTimeout(resolve, 800));
                    
                    // For production, uncomment this:
                    const response = await fetch(`${this.baseURL}/api/movies`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return await response.json();
                } catch (error) {
                    console.error('Error fetching movies:', error);
                    throw error;
                }
            }

            // Get all movies
            async getMovies() {
                return await this.fetchMovies();
            }

            // Get movies by genre
            async getMoviesByGenre(genre) {
                const movies = await this.fetchMovies();
                return movies.filter(movie => 
                    movie.genres.some(g => g.toLowerCase().includes(genre.toLowerCase()))
                );
            }

            // Get top rated movies
            async getTopRated() {
                const movies = await this.fetchMovies();
                return movies.sort((a, b) => b.rating - a.rating);
            }

            // Get random featured movie
            async getFeaturedMovie() {
                const movies = await this.fetchMovies();
                return movies[Math.floor(Math.random() * movies.length)];
            }
        }

        // App Class
        class StreamFlixApp {
            constructor() {
                this.api = new APIService();
                this.modal = document.getElementById('modal');
                this.closeModal = document.getElementById('close-modal');
                this.init();
            }

            async init() {
                this.setupEventListeners();
                await this.loadContent();
            }

            setupEventListeners() {
                // Header scroll effect
                window.addEventListener('scroll', () => {
                    const header = document.getElementById('header');
                    if (window.scrollY > 100) {
                        header.classList.add('scrolled');
                    } else {
                        header.classList.remove('scrolled');
                    }
                });

                // Modal events
                this.closeModal.addEventListener('click', () => {
                    this.modal.style.display = 'none';
                });

                window.addEventListener('click', (e) => {
                    if (e.target === this.modal) {
                        this.modal.style.display = 'none';
                    }
                });
            }

            async loadContent() {
                try {
                    // Load hero content with random featured movie
                    const featuredMovie = await this.api.getFeaturedMovie();
                    if (featuredMovie) {
                        this.setupHero(featuredMovie);
                    }

                    // Load content rows
                    await Promise.all([
                        this.loadRow('all-movies-row', () => this.api.getMovies()),
                        this.loadRow('action-row', () => this.api.getMoviesByGenre('Action')),
                        this.loadRow('scifi-row', () => this.api.getMoviesByGenre('Sci-Fi')),
                        this.loadRow('top-rated-row', () => this.api.getTopRated())
                    ]);

                } catch (error) {
                    console.error('Error loading content:', error);
                    this.showError('Failed to load content. Please try again later.');
                }
            }

            setupHero(movie) {
                document.getElementById('hero-title').textContent = movie.title;
                document.getElementById('hero-description').textContent = movie.plot;
                
                // Set hero background if poster exists
                const heroSection = document.getElementById('hero');
                if (movie.poster) {
                    heroSection.style.backgroundImage = `linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url('${movie.poster}')`;
                }
                
                document.getElementById('play-btn').addEventListener('click', (e) => {
                    e.preventDefault();
                    this.playMovie(movie);
                });

                document.getElementById('info-btn').addEventListener('click', (e) => {
                    e.preventDefault();
                    this.openModal(movie);
                });
            }

            playMovie(movie) {
                if (movie.movie_src) {
                    // In a real app, you'd open a video player
                    alert(`Playing: ${movie.title}\nVideo URL: ${movie.movie_src}`);
                    // window.open(movie.movie_src, '_blank');
                } else {
                    alert(`Video source not available for ${movie.title}`);
                }
            }

            async loadRow(rowId, fetchFunction) {
                const row = document.getElementById(rowId);
                
                try {
                    const data = await fetchFunction();
                    row.innerHTML = '';
                    
                    data.forEach(item => {
                        const card = this.createCard(item);
                        row.appendChild(card);
                    });
                } catch (error) {
                    row.innerHTML = '<div class="error">Failed to load content</div>';
                }
            }

            createCard(movie) {
                const card = document.createElement('div');
                card.className = 'card';
                
                // Use movie poster or fallback to gradient
                if (movie.poster) {
                    card.style.backgroundImage = `url('${movie.poster}')`;
                } else {
                    const colors = ['#e50914', '#f5c518', '#00d4aa', '#0080ff', '#ff6b6b'];
                    const randomColor = colors[Math.floor(Math.random() * colors.length)];
                    card.style.background = `linear-gradient(45deg, ${randomColor}20, ${randomColor}60)`;
                }
                
                card.innerHTML = `
                    <div class="card-overlay">
                        <div class="card-title">${movie.title}</div>
                        <div class="card-meta">
                            ${movie.genres.join(', ')} • ⭐ ${movie.rating}/10
                            ${movie.country ? ` • ${movie.country}` : ''}
                        </div>
                    </div>
                `;

                card.addEventListener('click', () => {
                    window.location.href = `/title/${movie._id}`;
                });


                return card;
            }

            openModal(movie) {
                document.getElementById('modal-title').textContent = movie.title;
                document.getElementById('modal-description').innerHTML = `
                    <p><strong>Plot:</strong> ${movie.plot}</p>
                    <p><strong>Rating:</strong> ⭐ ${movie.rating}/10</p>
                    <p><strong>Genres:</strong> ${movie.genres.join(', ')}</p>
                    <p><strong>Cast:</strong> ${movie.casts.join(', ')}</p>
                    <p><strong>Directors:</strong> ${movie.directors.join(', ')}</p>
                    ${movie.country ? `<p><strong>Country:</strong> ${movie.country}</p>` : ''}
                    <div style="margin-top: 20px;">
                        <button class="btn btn-primary" onclick="app.playMovie(${JSON.stringify(movie).replace(/"/g, '&quot;')})">
                            ▶ Play Movie
                        </button>
                    </div>
                `;
                
                const modalHeader = document.getElementById('modal-header');
                if (movie.poster) {
                    modalHeader.style.backgroundImage = `url('${movie.poster}')`;
                } else {
                    const colors = ['#e50914', '#f5c518', '#00d4aa', '#0080ff', '#ff6b6b'];
                    const randomColor = colors[Math.floor(Math.random() * colors.length)];
                    modalHeader.style.background = `linear-gradient(45deg, ${randomColor}40, ${randomColor}80)`;
                }
                
                this.modal.style.display = 'block';
            }

            showError(message) {
                document.body.innerHTML = `
                    <div class="error">
                        <h2>Error</h2>
                        <p>${message}</p>
                    </div>
                `;
            }
        }

        // Initialize app
        document.addEventListener('DOMContentLoaded', () => {
            new StreamFlixApp();
        });
    </script>
</body>
</html>